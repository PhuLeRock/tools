# How to use command line to interact with your VM:
# Remember to cd to the directory where the Vagrantfile exist
#
# vagrant ssh (this ssh into your VM) 
# vagrant status (show the VM status)
# vagrant up (start the VM)
# vagrant suspend (suspend the VM)
# vagrant resume (resume the VM)

#alias ks="kubectl -n kube-system"
#alias ksget="kubectl -n kube-system get"
#alias ksdescribe="kubectl -n kube-system describe"
#alias kscreate="kubectl -n kube-system create"
#alias ksapply="kubectl -n kube-system apply"
#alias ksdelete="kubectl -n kube-system delete"

#alias k="kubectl"
#alias kget="kubectl get"
#alias kdescribe="kubectl describe"
#alias kcreate="kubectl create"
#alias kapply="kubectl apply"
#alias kdelete="kubectl delete"

# This $sshkey is a script that inject ssh key into the VM, to use for ssh from the outside network
$sshkey = <<SCRIPT
echo Hello World >> /root/hello.txt
echo ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzPKGrRox7DgQwDyZr/PGnWeXD8ymbGOIJTebO9QBgEUSq9BORv8a3Mbxnb7ctli3nVz7/NEOd3qI730gXAhfEltdzJiiDa1bH5g2t9Rig/MLPAX587u7zqmSjrZc1mj9b0u3r+dIaIVWenuIsVbv6oWVe+UuN3hWLu6HXVOVetzTfSwt27EKYTTu3QH9WQTlq3uZjlk2ffLSgnnf5er0JyywHXeyIuZo4RjrLgfcjkZVqPQVmGY/MPstuTrSlloqGJLtwB/i1FgJ4lkIJcNGmz74u3rj2UFlCBPjJQtfSCsBqxH0177zr+ucCZRShFc8iqK8vEqtHSuOAB+vB1/UQw== phulerock@mocxi-lappy >> /home/vagrant/.ssh/authorized_keys
mkdir -p "/root/.ssh"
echo ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzPKGrRox7DgQwDyZr/PGnWeXD8ymbGOIJTebO9QBgEUSq9BORv8a3Mbxnb7ctli3nVz7/NEOd3qI730gXAhfEltdzJiiDa1bH5g2t9Rig/MLPAX587u7zqmSjrZc1mj9b0u3r+dIaIVWenuIsVbv6oWVe+UuN3hWLu6HXVOVetzTfSwt27EKYTTu3QH9WQTlq3uZjlk2ffLSgnnf5er0JyywHXeyIuZo4RjrLgfcjkZVqPQVmGY/MPstuTrSlloqGJLtwB/i1FgJ4lkIJcNGmz74u3rj2UFlCBPjJQtfSCsBqxH0177zr+ucCZRShFc8iqK8vEqtHSuOAB+vB1/UQw== phulerock@mocxi-lappy >> /root/.ssh/authorized_keys
SCRIPT

# $installdocker use to install docker on the VM (lastest version)
$installdocker = <<SCRIPT
apt-get install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"     
apt-get update
apt-get install docker-ce -y
usermod -a -G docker vagrant
SCRIPT

# $installk8s use to install Kubernetes local cluster and taint the master node to run pods
$installk8s = <<SCRIPT
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
apt-get install -y kubeadm
swapoff -a
hostnamectl set-hostname k8slocal
kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=1.1.1.110 --kubernetes-version stable-1.13
rm -rf $HOME/.kube
mkdir $HOME/.kube
cp /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
export KUBECONFIG=$HOME/.kube/config
echo "export KUBECONFIG=$HOME/.kube/config" | tee -a ~/.bashrc
source <(kubectl completion bash)
echo "source <(kubectl completion bash)" >> ~/.bashrc
source <(kubectl completion bash)
rm -rf /home/vagrant/.kube
mkdir /home/vagrant/.kube
cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chown vagrant:vagrant /home/vagrant/.kube/config
echo "export KUBECONFIG=/home/vagrant/.kube/config" | tee -a ~/.bashrc
echo "source <(kubectl completion bash)" >> /home/vagrant/.bashrc
echo "alias k=kubectl" >> /home/vagrant/.bashrc
kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml 
kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml 
kubectl taint nodes --all node-role.kubernetes.io/master- 

SCRIPT

Vagrant.configure("2") do |config| 
  config.vm.define "k8slocal" do |hihi| 
    hihi.vm.box = "ubuntu/bionic64" 
    hihi.vm.network "private_network", ip: "1.1.1.110" 
    hihi.vm.hostname = "k8slocal" 
    hihi.vm.provider "virtualbox" do |vb| 
      vb.memory = "4000" 
	  vb.cpus = "2" 
    end
    hihi.vm.provision "shell", inline: $sshkey 
    hihi.vm.provision "shell", inline: $installdocker 
    hihi.vm.provision "shell", inline: $installk8s 
 end 
end